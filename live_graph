 import board
import busio
from adafruit_pm25.i2c import PM25_I2C
import adafruit_bme680
import adafruit_scd30
import plotly.graph_objs as go
import dash
from dash.dependencies import Output, Input
from dash import dcc
from dash import html
import csv

bme680_i2c = board.I2C()
pm25_i2c = busio.I2C(board.SCL, board.SDA, frequency=100000)

# naming csv files to store data from each sensor
pth_data = 'PTH_data.csv'
aq_data = 'AQ_data.csv'
co2_data = 'CO2_data.csv'

# creating csv files on the user's computer to store each sensor's data
# wiping the files clean each time sensors start

with(
    open(pth_data, 'w+') as pth_file,
    open(aq_data, 'w+') as aq_file,
    open(co2_data, 'w+') as co2_file
    ):
    pth_file.close()
    aq_file.close()
    co2_file.close()
    
def pth(pth_file):
    try: # checking for bme680 sensor
        sensor = adafruit_bme680.Adafruit_BME680_I2C(bme680_i2c)
    except Exception as e:
        sensor = 0
    if sensor != 0:
        writer = csv.writer(pth_file)
        pth_line = []                        
        pth_line.append(sensor.gas)
        pth_line.append(sensor.temperature)
        pth_line.append(sensor.humidity)
        pth_line.append(sensor.pressure)
        pth_line.append(sensor.altitude)
        writer.writerow(pth_line)
    else:
        writer = csv.writer(pth_file)
        writer.writerow(['0', '0', '0', '0', '0'])
    
def aq(aq_file):         
    try: # checking for a pm25 air quality sensor
        aq = adafruit_pm25.i2c.PM25(pm25_i2c)
    except Exception as e: 
        aq = 0
    if aq != 0:
        writer = csv.writer(aq_file)
        aq_line = []
        read_data = pm25.read()
        aq_line.append(aqdata['particles 03um'])
        aq_line.append(aqdata['particles 05um'])
        aq_line.append(aqdata['particles 10um'])
        aq_line.append(aqdata['particles 25um'])
        aq_line.append(aqdata['particles 50um'])
        aq_line.append(aqdata['particles 100um'])
        writer.writerow(aq_line)
    elif aq == 0:
        writer = csv.writer(aq_file)
        writer.writerow(['0', '0', '0', '0', '0', '0'])

def co2(co2_file):         
    try: # checking for a co2 sensor
        scd = adafruit_scd30.SCD30(board.I2C())
    except Exception as e: 
        scd = 0
    if scd != 0:
        writer = csv.writer(co2_file)
        co2_line = []
        if scd.CO2 != None:
            co2_line.append(scd.CO2)
            writer.writerow(co2_line)
    else:
        writer = csv.writer(co2_file)
        writer.writerow('0')

while True:
    app = dash.Dash(__name__) 
    app.layout = html.Div(
        [
            html.Button ('Stop', id='stop_btn', n_clicks=0),
            dcc.Graph(id = 'live-graph',
                      animate = True),
            dcc.Interval(
                id = 'graph-update',
    #             time between data updates
                interval = 5000,
    #             number of intervals completed
                n_intervals = 0
                ),
            ]
        )
    # callbacks
    @app.callback(
            Output('live-graph', 'figure'),
            Input('graph-update', 'n_intervals'),
            Input('stop_btn', 'n_clicks')

    )
    
    def update_graph(n_intervals, n_clicks):
            
            if n_clicks % 2 ==0: # press Stop once to stop, press again to resume
                
                # writing sensor data to csv files
                with(
                    open(pth_data, 'a', newline='') as pth_file,
                    open(co2_data, 'a', newline='') as co2_file,
                    open(aq_data, 'a', newline='') as aq_file,

                    ):
                    pth(pth_file)
                    aq(aq_file)
                    co2(co2_file)
                    
                # reading co2 csv file & generating scatterplot data trace using values in csv file
                with open(co2_data, 'r') as co2_file:
                    co2_reader = list(csv.reader(co2_file, delimiter=','))
                
                    gas_data = go.Scatter(
                                 x = list(range(0,len(list(co2_reader)))),
                                 y = list(i[0] for i in co2_reader),
                                 name = 'CO2 (ppm)',
                                 mode = 'lines')
                    
                # reading air quality csv file & generating scatterplot data traces using values in csv file
                with open(aq_data, 'r') as aq_file:
                    aq_reader = list(csv.reader(aq_file, delimiter=','))
                    pt3um_data = go.Scatter(
                            x = list(range(0,len(list(aq_reader)))),
                            y = list(i[0] for i in aq_reader),
                            name = 'Particles > 0.3um / 0.1L air',
                            mode = 'lines')
                    pt5um_data = go.Scatter(
                            x = list(range(0,len(list(aq_reader)))),
                            y = list(i[1] for i in aq_reader),
                            name = 'Particles > 0.5um / 0.1L air',
                            mode = 'lines')
                    one_um_data = go.Scatter(
                            x = list(range(0,len(list(aq_reader)))),
                            y = list(i[2] for i in aq_reader),
                            name = 'Particles > 1.0um / 0.1L air',
                            mode = 'lines')
                    two_um_data = go.Scatter(
                            x = list(range(0,len(list(aq_reader)))),
                            y = list(i[3] for i in aq_reader),
                            name = 'Particles > 2.0um / 0.1L air',
                            mode = 'lines')
                    five_um_data = go.Scatter(
                            x = list(range(0,len(list(aq_reader)))),
                            y = list(i[4] for i in aq_reader),
                            name = 'Particles > 5.0um / 0.1L air',
                            mode = 'lines')
                    ten_um_data = go.Scatter(
                            x = list(range(0,len(list(aq_reader)))),
                            y = list(i[5] for i in aq_reader),
                            name = 'Particles > 10.0um / 0.1L air',
                            mode = 'lines')
                    
                # reading PTH csv file & generating scatterplot data traces using values in csv file
                with open(pth_data,'r') as pth_file:
                    pth_reader = list(csv.reader(pth_file, delimiter=','))
                    voc_data = go.Scatter(
                            x = list(range(0, len(list(pth_reader)))),
                            y = list(i[0] for i in pth_reader), # list of first value in every row
                            name = 'VOC (resistance, in Ohms)',
                            mode = 'lines'
                            )
                    temp_data = go.Scatter(
                            x = list(range(0,len(list(pth_reader)))),
                            y = list(i[1] for i in pth_reader),
                            name = 'Temperature (Celsius)',
                            mode = 'lines')
                    humidity_data = go.Scatter(
                            x = list(range(0,len(list(pth_reader)))),
                            y = list(i[2] for i in pth_reader),
                            name = 'Humidity (% relative humidity)',
                            mode = 'lines')
                    pressure_data = go.Scatter(
                            x = list(range(0,len(list(pth_reader)))),
                            y = list(i[3] for i in pth_reader),
                            name = 'Pressure (hPa)',
                            mode = 'lines')
                    altitude_data = go.Scatter(
                            x = list(range(0,len(list(pth_reader)))),
                            y = list(i[4] for i in pth_reader),
                            name = 'Altitude (cm)',
                            mode = 'lines')
                    
                # list of all scatterplot data traces & layout formatting    
                return {'data': [voc_data, temp_data, humidity_data, pressure_data, altitude_data,
                                 pt3um_data, pt5um_data, one_um_data, two_um_data, five_um_data, ten_um_data,
                                 gas_data],
                     'layout': go.Layout(xaxis = dict(
                      range = [0, len(list(pth_reader))]), xaxis_title = dict(text='Time (seconds)')
                                            
                             )}
            
            elif n_clicks % 2 != 0: # stop button pressed
                print('Graph has been paused')

    if __name__ == '__main__':
        app.run_server()
